name: Cluster Run 

on:
  workflow_dispatch:
  pull_request:

jobs:
  build-and-test-cluster:
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Setup environment variables
        run: |
          PUBLIC_IP=$(curl -s https://api.ipify.org)
          echo "IP_ADDRESS=$PUBLIC_IP" >> $GITHUB_ENV
          echo "UNIQUE_ID=$(openssl rand -hex 3 | head -c 6)" >> $GITHUB_ENV
      
      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-$(uname -s)-$(uname -m)" \
          -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Set the environment for docker-compose 
        run: |
          cd testing/development
          # Get the UID and GID of the current user
          echo "HOST_UID=$(id -u)" > .env
          echo "HOST_GID=$(id -g)" >> .env

      # - name: Run Docker Compose Build to fix a user id issue in a prebuilt container
      #   run: |
      #     cd testing/development
      #     docker-compose build --no-cache 

      - name: Run Docker Compose
        run: docker-compose -f testing/development/docker-compose.yml up  -d

      - name: List docker containers to wait for them to start
        run: |
          docker ps 

      - name: List files in home directory
        run: |
          set +e
          cd testing/development
          docker-compose exec -T lme bash -c "pwd && ls -la"

      - name:  Check powershell environment 
        run: |
          set +e  
          cd testing/development
          docker-compose exec -T lme pwsh -Command "& { 
            cd /home/admin.ackbar/LME; \
            ls -la; \
            exit \$LASTEXITCODE;
          }"
          EXIT_CODE=$?
          echo "Exit code: $EXIT_CODE"
          set -e  
          if [ "$EXIT_CODE" -ne 0 ]; then
            exit $EXIT_CODE
          fi

      - name:  Build the cluster 
        run: |
          set +e  
          cd testing/development
          docker-compose exec -T lme pwsh -Command "& { 
            cd /home/admin.ackbar/LME/testing; \
            \$env:AZURE_CLIENT_ID='${{ secrets.AZURE_CLIENT_ID }}'; \
            \$env:AZURE_SECRET='${{ secrets.AZURE_SECRET }}'; \
            \$env:AZURE_CLIENT_SECRET='${{ secrets.AZURE_SECRET }}'; \
            \$env:AZURE_TENANT='${{ secrets.AZURE_TENANT }}'; \
            \$env:UNIQUE_ID='${{ env.UNIQUE_ID }}'; \
            \$env:RESOURCE_GROUP='LME-pipe-${{ env.UNIQUE_ID }}'; \
            \$env:IP_ADDRESS='${{ env.IP_ADDRESS }}'; \
            ./development/build_cluster.ps1 -IPAddress \$env:IP_ADDRESS; \
            exit \$LASTEXITCODE;
          }"
          EXIT_CODE=$?
          echo "Exit code: $EXIT_CODE"
          set -e  
          if [ "$EXIT_CODE" -ne 0 ]; then
            exit $EXIT_CODE
          fi

      - name:  Install lme on cluster 
        run: |
          set +e  
          cd testing/development
          docker-compose exec -T lme pwsh -Command "& { 
            cd /home/admin.ackbar/LME/testing; \
            \$env:AZURE_CLIENT_ID='${{ secrets.AZURE_CLIENT_ID }}'; \
            \$env:AZURE_SECRET='${{ secrets.AZURE_SECRET }}'; \
            \$env:AZURE_CLIENT_SECRET='${{ secrets.AZURE_SECRET }}'; \
            \$env:AZURE_TENANT='${{ secrets.AZURE_TENANT }}'; \
            \$env:UNIQUE_ID='${{ env.UNIQUE_ID }}'; \
            \$env:RESOURCE_GROUP='LME-pipe-${{ env.UNIQUE_ID }}'; \
            ./development/install_lme.ps1; \
            exit \$LASTEXITCODE;
          }"
          EXIT_CODE=$?
          echo "Exit code: $EXIT_CODE"
          set -e  
          if [ "$EXIT_CODE" -ne 0 ]; then
            exit $EXIT_CODE
          fi

      - name:  Set the environment passwords for other steps 
        run: |
          set +ex
          cd testing/development
          docker-compose exec -T lme bash -c "
            cd /home/admin.ackbar/LME/testing \
            && . configure/lib/functions.sh \
            && extract_credentials 'LME-pipe-${{ env.UNIQUE_ID }}.password.txt' \
            && touch ${{ env.UNIQUE_ID }}.github.sh \
            && echo \"elastic=\$elastic\" >> ${{ env.UNIQUE_ID }}.github.sh \
            && echo \"kibana=\$kibana\" >> ${{ env.UNIQUE_ID }}.github.sh \
            && echo \"logstash_system=\$logstash_system\" >> ${{ env.UNIQUE_ID }}.github.sh \
            && echo \"logstash_writer=\$logstash_writer\" >> ${{ env.UNIQUE_ID }}.github.sh \
            && echo \"dashboard_update=\$dashboard_update\" >> ${{ env.UNIQUE_ID }}.github.sh \
            "
            . ../${{ env.UNIQUE_ID }}.github.sh
            echo "elastic=$elastic" >> $GITHUB_ENV
            echo "kibana=$kibana" >> $GITHUB_ENV
            echo "logstash_system=$logstash_system" >> $GITHUB_ENV
            echo "logstash_writer=$logstash_writer" >> $GITHUB_ENV
            echo "dashboard_update=$dashboard_update" >> $GITHUB_ENV

      - name:  Check setting the environment passwords for other steps 
        run: |
          set +e  
          cd testing/development
          docker-compose exec -T lme bash -c "echo Elastic: ${{ env.elastic }}"

      - name: Cleanup environment 
        if: always()
        run: |
          cd testing/development
          docker-compose exec -T lme pwsh -Command "& { 
            cd /home/admin.ackbar/LME/testing; \
            \$env:AZURE_CLIENT_ID='${{ secrets.AZURE_CLIENT_ID }}'; \
            \$env:AZURE_SECRET='${{ secrets.AZURE_SECRET }}'; \
            \$env:AZURE_CLIENT_SECRET='${{ secrets.AZURE_SECRET }}'; \
            \$env:AZURE_TENANT='${{ secrets.AZURE_TENANT }}'; \
            \$env:UNIQUE_ID='${{ env.UNIQUE_ID }}'; \
            \$env:RESOURCE_GROUP='LME-pipe-${{ env.UNIQUE_ID }}'; \
            ./development/destroy_cluster.ps1; \
            exit \$LASTEXITCODE;
          }"
          docker-compose down
