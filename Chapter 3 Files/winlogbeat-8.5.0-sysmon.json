{"description":"Pipeline for Windows Sysmon Event Logs","on_failure":[{"set":{"field":"error.message","value":"Processor \"{{ _ingest.on_failure_processor_type }}\" with tag \"{{ _ingest.on_failure_processor_tag }}\" in pipeline \"{{ _ingest.on_failure_pipeline }}\" failed with message \"{{ _ingest.on_failure_message }}\""}}],"processors":[{"set":{"field":"ecs.version","value":"1.12.0"}},{"script":{"description":"Remove all empty values from event_data.","lang":"painless","source":"ctx.winlog?.event_data?.entrySet().removeIf(entry -> [null, \"\", \"-\", \"{00000000-0000-0000-0000-000000000000}\"].contains(entry.getValue()))"}},{"rename":{"field":"winlog.level","if":"ctx?.winlog?.level != \"\"","ignore_failure":true,"ignore_missing":true,"target_field":"log.level"}},{"date":{"field":"winlog.time_created","formats":["ISO8601"],"if":"ctx?.winlog?.time_created != null","ignore_failure":true,"target_field":"event.created"}},{"date":{"field":"winlog.event_data.UtcTime","formats":["yyyy-MM-dd HH:mm:ss.SSS"],"if":"ctx?.winlog?.event_data?.UtcTime != null","ignore_failure":true,"timezone":"UTC"}},{"set":{"field":"event.module","value":"sysmon"}},{"set":{"field":"event.kind","value":"event"}},{"set":{"field":"event.code","value":"{{winlog.event_id}}"}},{"script":{"description":"Set event category and type for all event types.","lang":"painless","params":{"1":{"category":["process"],"type":["start"]},"10":{"category":["process"],"type":["access"]},"11":{"category":["file"],"type":["creation"]},"12":{"category":["configuration","registry"],"type":["change"]},"13":{"category":["configuration","registry"],"type":["change"]},"14":{"category":["configuration","registry"],"type":["change"]},"15":{"category":["file"],"type":["access"]},"16":{"category":["configuration"],"type":["change"]},"17":{"category":["file"],"type":["creation"]},"18":{"category":["file"],"type":["access"]},"2":{"category":["file"],"type":["change"]},"22":{"category":["network"],"type":["connection","protocol","info"]},"23":{"category":["file"],"type":["deletion"]},"24":{"type":["change"]},"25":{"category":["process"],"type":["change"]},"26":{"category":["file"],"type":["deletion"]},"3":{"category":["network"],"type":["start","connection","protocol"]},"4":{"category":["process"],"type":["change"]},"5":{"category":["process"],"type":["end"]},"6":{"category":["driver"],"type":["start"]},"7":{"category":["process"],"type":["change"]}},"source":"if (ctx?.event?.code == null || params.get(ctx.event.code) == null) {\n  return;\n}\ndef hm = new HashMap(params[ctx.event.code]);\nhm.forEach((k, v) -> ctx.event[k] = v);","tag":"Add ECS categorization fields"}},{"convert":{"field":"winlog.record_id","ignore_failure":true,"ignore_missing":true,"type":"string"}},{"rename":{"field":"winlog.event_data.ID","if":"ctx.event.code == \"255\"","ignore_failure":true,"ignore_missing":true,"target_field":"error.code"}},{"rename":{"field":"winlog.event_data.RuleName","ignore_failure":true,"ignore_missing":true,"target_field":"rule.name"}},{"rename":{"field":"winlog.event_data.Type","if":"ctx.event.code == \"25\"","ignore_failure":true,"ignore_missing":true,"target_field":"message"}},{"rename":{"field":"winlog.event_data.Hash","ignore_failure":true,"ignore_missing":true,"target_field":"winlog.event_data.Hashes"}},{"kv":{"field":"winlog.event_data.Hashes","field_split":",","if":"ctx?.winlog?.event_data?.Hashes != null","ignore_failure":true,"target_field":"_temp.hashes","value_split":"="}},{"script":{"if":"ctx?._temp?.hashes != null","lang":"painless","source":"def hashIsEmpty(String hash) {\n  if (hash == \"\") {\n    return true;\n  }\n  \n  Pattern emptyHashRegex = /^0*$/;\n  def matcher = emptyHashRegex.matcher(hash);\n  \n  return matcher.matches(); \n}\n\ndef hashes = new HashMap();\ndef related = [\n  \"hash\": new ArrayList()\n];\nfor (entry in ctx._temp.hashes.entrySet()) {\n  def key = entry.getKey().toString().toLowerCase();\n  def value = entry.getValue().toString().toLowerCase();\n\n  if (hashIsEmpty(value)) {\n    continue;\n  }\n\n  hashes[key] = value;\n  related.hash.add(value);\n}\n\nctx._temp.hashes = hashes;\nif (related.hash.length > 0) {\n  ctx.related = related;\n}"}},{"rename":{"field":"_temp.hashes","if":"ctx?._temp?.hashes != null &&\n[\"1\", \"23\", \"24\", \"25\", \"26\"].contains(ctx.event.code)","target_field":"process.hash"}},{"rename":{"field":"process.hash.imphash","ignore_failure":true,"ignore_missing":true,"target_field":"process.pe.imphash"}},{"rename":{"field":"winlog.event_data.ProcessGuid","ignore_failure":true,"ignore_missing":true,"target_field":"process.entity_id"}},{"convert":{"field":"winlog.event_data.ProcessId","ignore_failure":true,"ignore_missing":true,"target_field":"process.pid","type":"long"}},{"rename":{"field":"winlog.event_data.Image","ignore_failure":true,"ignore_missing":true,"target_field":"process.executable"}},{"rename":{"field":"winlog.event_data.SourceProcessGuid","ignore_failure":true,"ignore_missing":true,"target_field":"process.entity_id"}},{"rename":{"field":"winlog.event_data.SourceProcessGUID","ignore_failure":true,"ignore_missing":true,"target_field":"process.entity_id"}},{"convert":{"field":"winlog.event_data.SourceProcessId","ignore_failure":true,"ignore_missing":true,"target_field":"process.pid","type":"long"}},{"convert":{"field":"winlog.event_data.SourceThreadId","ignore_failure":true,"ignore_missing":true,"target_field":"process.thread.id","type":"long"}},{"rename":{"field":"winlog.event_data.SourceImage","ignore_failure":true,"ignore_missing":true,"target_field":"process.executable"}},{"rename":{"field":"winlog.event_data.Destination","ignore_failure":true,"ignore_missing":true,"target_field":"process.executable"}},{"rename":{"field":"winlog.event_data.CommandLine","ignore_failure":true,"ignore_missing":true,"target_field":"process.command_line"}},{"rename":{"field":"winlog.event_data.CurrentDirectory","ignore_failure":true,"ignore_missing":true,"target_field":"process.working_directory"}},{"rename":{"field":"winlog.event_data.ParentProcessGuid","ignore_failure":true,"ignore_missing":true,"target_field":"process.parent.entity_id"}},{"convert":{"field":"winlog.event_data.ParentProcessId","ignore_failure":true,"ignore_missing":true,"target_field":"process.parent.pid","type":"long"}},{"rename":{"field":"winlog.event_data.ParentImage","ignore_failure":true,"ignore_missing":true,"target_field":"process.parent.executable"}},{"rename":{"field":"winlog.event_data.ParentCommandLine","ignore_failure":true,"ignore_missing":true,"target_field":"process.parent.command_line"}},{"rename":{"field":"winlog.event_data.OriginalFileName","if":"ctx.event.code != \"7\"","ignore_failure":true,"ignore_missing":true,"target_field":"process.pe.original_file_name"}},{"set":{"copy_from":"winlog.event_data.Company","field":"process.pe.company","if":"ctx.event.code != \"7\"","ignore_empty_value":true,"ignore_failure":true}},{"set":{"copy_from":"winlog.event_data.Description","field":"process.pe.description","if":"ctx.event.code != \"7\"","ignore_empty_value":true,"ignore_failure":true}},{"set":{"copy_from":"winlog.event_data.FileVersion","field":"process.pe.file_version","if":"ctx.event.code != \"7\"","ignore_empty_value":true,"ignore_failure":true}},{"set":{"copy_from":"winlog.event_data.Product","field":"process.pe.product","if":"ctx.event.code != \"7\"","ignore_empty_value":true,"ignore_failure":true}},{"script":{"description":"Implements Windows-like SplitCommandLine","if":"(ctx?.process?.command_line != null && ctx.process.command_line != \"\") || \n(ctx?.process?.parent?.command_line != null && ctx.process.parent.command_line != \"\")","lang":"painless","source":"// appendBSBytes appends n '\\\\' bytes to b and returns the resulting slice.\ndef appendBSBytes(StringBuilder b, int n) {\n    for (; n > 0; n--) {\n        b.append('\\\\');\n    }\n    return b;\n}\n\n// readNextArg splits command line string cmd into next\n// argument and command line remainder.\ndef readNextArg(String cmd) {\n    def b = new StringBuilder();\n    boolean inquote;\n    int nslash;\n    for (; cmd.length() > 0; cmd = cmd.substring(1)) {\n        def c = cmd.charAt(0);\n        if (c == (char)' ' || c == (char)0x09) {\n            if (!inquote) {\n                return [\n                    \"arg\":  appendBSBytes(b, nslash).toString(),\n                    \"rest\": cmd.substring(1)\n                ];\n            }\n        } else if (c == (char)'\"') {\n            b = appendBSBytes(b, nslash/2);\n            if (nslash%2 == 0) {\n                // use \"Prior to 2008\" rule from\n                // http://daviddeley.com/autohotkey/parameters/parameters.htm\n                // section 5.2 to deal with double double quotes\n                if (inquote && cmd.length() > 1 && cmd.charAt(1) == (char)'\"') {\n                    b.append(c);\n                    cmd = cmd.substring(1);\n                }\n                inquote = !inquote;\n            } else {\n                b.append(c);\n            }\n            nslash = 0;\n            continue;\n        } else if (c == (char)'\\\\') {\n            nslash++;\n            continue;\n        }\n        b = appendBSBytes(b, nslash);\n        nslash = 0;\n        b.append(c);\n    }\n    return [\n        \"arg\":  appendBSBytes(b, nslash).toString(), \n        \"rest\": ''\n    ];\n}\n\n// commandLineToArgv splits a command line into individual argument\n// strings, following the Windows conventions documented\n// at http://daviddeley.com/autohotkey/parameters/parameters.htm#WINARGV\n// Original implementation found at: https://github.com/golang/go/commit/39c8d2b7faed06b0e91a1ad7906231f53aab45d1\ndef commandLineToArgv(String cmd) {\n    def args = new ArrayList();\n    while (cmd.length() > 0) {\n        if (cmd.charAt(0) == (char)' ' || cmd.charAt(0) == (char)0x09) {\n            cmd = cmd.substring(1);\n            continue;\n        }\n        def next = readNextArg(cmd);\n        cmd = next.rest;\n        args.add(next.arg);\n    }\n    return args;\n}\n\ndef cmd = ctx?.process?.command_line;\nif (cmd != null && cmd != \"\") {\n  ctx.process.args = commandLineToArgv(cmd);\n  ctx.process.args_count = ctx.process.args.length;\n}\n\ndef parentCmd = ctx?.process?.parent?.command_line;\nif (parentCmd != null && parentCmd != \"\") {\n  ctx.process.parent.args = commandLineToArgv(parentCmd);\n  ctx.process.parent.args_count = ctx.process.parent.args.length;\n}"}},{"script":{"description":"Adds process name information.","if":"(ctx?.process?.executable != null && ctx.process.executable.length() > 1) ||\n(ctx?.process?.parent?.executable != null && ctx.process.parent.executable.length() > 1)","lang":"painless","source":"def getProcessName(def path) {\n  def idx = path.lastIndexOf(\"\\\\\");\n  if (idx > -1) {\n      return path.substring(idx+1);\n  }\n  return \"\";\n}\n\ndef cmd = ctx?.process?.executable;\nif (cmd != null && cmd != \"\" && ctx?.process?.name == null) {\n  def name = getProcessName(cmd);\n  if (name != \"\") {\n    ctx.process.name = name;\n  }\n}\n\ndef parentCmd = ctx?.process?.parent?.executable;\nif (parentCmd != null && parentCmd != \"\" && ctx?.process?.parent?.name == null) {\n  def name = getProcessName(parentCmd);\n  if (name != \"\") {\n    ctx.process.parent.name = name;\n  }\n}"}},{"rename":{"field":"_temp.hashes","if":"ctx?._temp?.hashes != null &&\n[\"6\", \"7\", \"15\"].contains(ctx.event.code)","target_field":"file.hash"}},{"rename":{"field":"file.hash.imphash","ignore_failure":true,"ignore_missing":true,"target_field":"file.pe.imphash"}},{"rename":{"field":"winlog.event_data.TargetFilename","ignore_failure":true,"ignore_missing":true,"target_field":"file.path"}},{"rename":{"field":"winlog.event_data.Device","ignore_failure":true,"ignore_missing":true,"target_field":"file.path"}},{"rename":{"field":"winlog.event_data.PipeName","ignore_failure":true,"ignore_missing":true,"target_field":"file.name"}},{"rename":{"field":"winlog.event_data.ImageLoaded","ignore_failure":true,"ignore_missing":true,"target_field":"file.path"}},{"set":{"copy_from":"winlog.event_data.Signature","field":"file.code_signature.subject_name","ignore_empty_value":true,"ignore_failure":true}},{"set":{"copy_from":"winlog.event_data.SignatureStatus","field":"file.code_signature.status","ignore_empty_value":true,"ignore_failure":true}},{"rename":{"field":"winlog.event_data.OriginalFileName","if":"ctx.event.code == \"7\"","ignore_failure":true,"ignore_missing":true,"target_field":"file.pe.original_file_name"}},{"set":{"copy_from":"winlog.event_data.Company","field":"file.pe.company","if":"ctx.event.code == \"7\"","ignore_empty_value":true,"ignore_failure":true}},{"set":{"copy_from":"winlog.event_data.Description","field":"file.pe.description","if":"ctx.event.code == \"7\"","ignore_empty_value":true,"ignore_failure":true}},{"set":{"copy_from":"winlog.event_data.FileVersion","field":"file.pe.file_version","if":"ctx.event.code == \"7\"","ignore_empty_value":true,"ignore_failure":true}},{"set":{"copy_from":"winlog.event_data.Product","field":"file.pe.product","if":"ctx.event.code == \"7\"","ignore_empty_value":true,"ignore_failure":true}},{"set":{"field":"file.code_signature.signed","if":"ctx?.winlog?.event_data?.Signed == true","value":true}},{"set":{"field":"file.code_signature.valid","if":"ctx?.winlog?.event_data?.SignatureStatus == \"Valid\"","value":true}},{"script":{"description":"Adds file information.","if":"ctx?.file?.path != null && ctx.file.path.length() > 1","lang":"painless","source":"def path = ctx.file.path;\ndef idx = path.lastIndexOf(\"\\\\\");\nif (idx > -1) {\n    if (ctx?.file == null) {\n        ctx.file = new HashMap();\n    }\n    ctx.file.name = path.substring(idx+1);\n    ctx.file.directory = path.substring(0, idx);\n\n    def extIdx = path.lastIndexOf(\".\");\n    if (extIdx > -1) {\n        ctx.file.extension = path.substring(extIdx+1);\n    }\n}"}},{"rename":{"field":"winlog.event_data.Protocol","ignore_failure":true,"ignore_missing":true,"target_field":"network.transport"}},{"rename":{"field":"winlog.event_data.DestinationPortName","if":"ctx.event.code != \"22\"","ignore_failure":true,"ignore_missing":true,"target_field":"network.protocol"}},{"rename":{"field":"winlog.event_data.SourcePortName","if":"ctx.event.code != \"22\"","ignore_failure":true,"ignore_missing":true,"target_field":"network.protocol"}},{"set":{"field":"network.protocol","if":"ctx.event.code == \"22\"","value":"dns"}},{"convert":{"field":"winlog.event_data.SourceIp","ignore_failure":true,"ignore_missing":true,"target_field":"source.ip","type":"ip"}},{"rename":{"field":"winlog.event_data.SourceHostname","ignore_failure":true,"ignore_missing":true,"target_field":"source.domain"}},{"convert":{"field":"winlog.event_data.SourcePort","ignore_failure":true,"ignore_missing":true,"target_field":"source.port","type":"long"}},{"convert":{"field":"winlog.event_data.DestinationIp","ignore_failure":true,"ignore_missing":true,"target_field":"destination.ip","type":"ip"}},{"rename":{"field":"winlog.event_data.DestinationHostname","ignore_failure":true,"ignore_missing":true,"target_field":"destination.domain"}},{"convert":{"field":"winlog.event_data.DestinationPort","ignore_failure":true,"ignore_missing":true,"target_field":"destination.port","type":"long"}},{"rename":{"field":"winlog.event_data.QueryName","ignore_failure":true,"ignore_missing":true,"target_field":"dns.question.name"}},{"set":{"field":"network.direction","if":"ctx?.winlog?.event_data?.Initiated == \"true\"","value":"egress"}},{"set":{"field":"network.direction","if":"ctx?.winlog?.event_data?.Initiated == \"false\"","value":"ingress"}},{"set":{"field":"network.type","if":"ctx?.winlog?.event_data?.SourceIsIpv6 == \"false\"","value":"ipv4"}},{"set":{"field":"network.type","if":"ctx?.winlog?.event_data?.SourceIsIpv6 == \"true\"","value":"ipv6"}},{"script":{"description":"Splits the QueryResults field that contains the DNS responses.\nExample: \"type:  5 f2.taboola.map.fastly.net;::ffff:151.101.66.2;::ffff:151.101.130.2;::ffff:151.101.194.2;::ffff:151.101.2.2;\"\n","if":"ctx?.winlog?.event_data?.QueryResults != null","lang":"painless","params":{"1":"A","10":"NULL","100":"UINFO","101":"UID","102":"GID","103":"UNSPEC","11":"WKS","12":"PTR","13":"HINFO","14":"MINFO","15":"MX","16":"TXT","17":"RP","18":"AFSDB","19":"X25","2":"NS","20":"ISDN","21":"RT","22":"NSAP","23":"NSAPPTR","24":"SIG","248":"ADDRS","249":"TKEY","25":"KEY","250":"TSIG","251":"IXFR","252":"AXFR","253":"MAILB","254":"MAILA","255":"ANY","26":"PX","27":"GPOS","28":"AAAA","29":"LOC","3":"MD","30":"NXT","31":"EID","32":"NIMLOC","33":"SRV","34":"ATMA","35":"NAPTR","36":"KX","37":"CERT","38":"A6","39":"DNAME","4":"MF","40":"SINK","41":"OPT","43":"DS","46":"RRSIG","47":"NSEC","48":"DNSKEY","49":"DHCID","5":"CNAME","6":"SOA","65281":"WINS","65282":"WINSR","7":"MB","8":"MG","9":"MR"},"source":"def results = /;/.split(ctx.winlog.event_data.QueryResults);\ndef answers = new ArrayList();\ndef ips = new ArrayList();\ndef relatedHosts = new ArrayList();\nfor (def i = 0; i < results.length; i++) {\n  def answer = results[i];\n  if (answer == \"\") {\n    continue;\n  }\n\n  if (answer.startsWith(\"type:\")) {\n    def parts = /\\s+/.split(answer);\n    if (parts.length != 3) {\n      throw new Exception(\"unexpected QueryResult format\");\n    }\n\n    answers.add([\n      \"type\": params[parts[1]],\n      \"data\": parts[2]\n    ]);\n    relatedHosts.add(parts[2]);\n  } else {\n    answer = answer.replace(\"::ffff:\", \"\");\n    ips.add(answer);\n  }\n}\n\nif (answers.length > 0) {\n  ctx.dns.answers = answers;\n}\nif (ips.length > 0) {\n  ctx.dns.resolved_ip = ips;\n}\nif (relatedHosts.length > 0) {\n  if (ctx?.related == null) {\n    ctx.related = new HashMap();\n  }\n  ctx.related.hosts = relatedHosts;\n}"}},{"foreach":{"field":"dns.resolved_ip","ignore_missing":true,"processor":{"convert":{"field":"_ingest._value","on_failure":[{"remove":{"field":"_ingest._value"}}],"type":"ip"}}}},{"script":{"description":"Convert V4MAPPED addresses.","if":"ctx?.dns?.resolved_ip != null","lang":"painless","source":"if (ctx.dns.answers == null) {\n  ctx.dns.answers = new ArrayList();\n}\nfor (def i = 0; i < ctx.dns.resolved_ip.length; i++) {\n  def ip = ctx.dns.resolved_ip[i];\n  if (ip == null) {\n    ctx.dns.resolved_ip.remove(i);\n    continue;\n  }\n\n  // Synthesize record type based on IP address type.\n  def type = \"A\";\n  if (ip.indexOf(\":\") != -1) {\n    type = \"AAAA\";\n  }\n  ctx.dns.answers.add([\n    \"type\": type,\n    \"data\": ip\n  ]);\n}"}},{"registered_domain":{"field":"dns.question.name","ignore_failure":true,"ignore_missing":true,"target_field":"dns.question"}},{"append":{"allow_duplicates":false,"field":"related.hosts","if":"ctx?.dns?.question?.name != null && ctx?.dns?.question?.name != \"\"","value":"{{dns.question.name}}"}},{"remove":{"description":"Remove dns.question.domain because it is not part of ECS and is redundant with dns.question.name.","field":"dns.question.domain","ignore_failure":true,"ignore_missing":true}},{"foreach":{"field":"dns.resolved_ip","ignore_missing":true,"processor":{"append":{"allow_duplicates":false,"field":"related.ip","ignore_failure":true,"value":"{{_ingest._value}}"}}}},{"community_id":{"ignore_failure":true,"ignore_missing":false}},{"set":{"copy_from":"winlog.user.identifier","field":"user.id","ignore_empty_value":true,"ignore_failure":true}},{"split":{"field":"winlog.event_data.User","if":"ctx?.winlog?.event_data?.User != null","separator":"\\\\","target_field":"_temp.user_parts"}},{"set":{"field":"user.domain","if":"ctx?._temp?.user_parts != null && ctx._temp.user_parts.size() == 2","ignore_empty_value":true,"ignore_failure":true,"value":"{{_temp.user_parts.0}}"}},{"set":{"field":"user.name","if":"ctx?._temp?.user_parts != null && ctx._temp.user_parts.size() == 2","ignore_empty_value":true,"ignore_failure":true,"value":"{{_temp.user_parts.1}}"}},{"rename":{"field":"winlog.event_data.QueryStatus","ignore_failure":true,"ignore_missing":true,"target_field":"sysmon.dns.status"}},{"script":{"description":"Translate DNS Query status.","if":"ctx?.sysmon?.dns?.status != null && ctx?.sysmon?.dns?.status != \"\"","lang":"painless","params":{"0":"SUCCESS","10054":"WSAECONNRESET","10055":"WSAENOBUFS","10060":"WSAETIMEDOUT","1214":"ERROR_INVALID_NETNAME","1223":"ERROR_CANCELLED","123":"ERROR_INVALID_NAME","13":"ERROR_INVALID_DATA","14":"ERROR_OUTOFMEMORY","1460":"ERROR_TIMEOUT","4312":"ERROR_OBJECT_NOT_FOUND","5":"ERROR_ACCESS_DENIED","8":"ERROR_NOT_ENOUGH_MEMORY","9001":"DNS_ERROR_RCODE_FORMAT_ERROR","9002":"DNS_ERROR_RCODE_SERVER_FAILURE","9003":"DNS_ERROR_RCODE_NAME_ERROR","9004":"DNS_ERROR_RCODE_NOT_IMPLEMENTED","9005":"DNS_ERROR_RCODE_REFUSED","9006":"DNS_ERROR_RCODE_YXDOMAIN","9007":"DNS_ERROR_RCODE_YXRRSET","9008":"DNS_ERROR_RCODE_NXRRSET","9009":"DNS_ERROR_RCODE_NOTAUTH","9010":"DNS_ERROR_RCODE_NOTZONE","9016":"DNS_ERROR_RCODE_BADSIG","9017":"DNS_ERROR_RCODE_BADKEY","9018":"DNS_ERROR_RCODE_BADTIME","9101":"DNS_ERROR_KEYMASTER_REQUIRED","9102":"DNS_ERROR_NOT_ALLOWED_ON_SIGNED_ZONE","9103":"DNS_ERROR_NSEC3_INCOMPATIBLE_WITH_RSA_SHA1","9104":"DNS_ERROR_NOT_ENOUGH_SIGNING_KEY_DESCRIPTORS","9105":"DNS_ERROR_UNSUPPORTED_ALGORITHM","9106":"DNS_ERROR_INVALID_KEY_SIZE","9107":"DNS_ERROR_SIGNING_KEY_NOT_ACCESSIBLE","9108":"DNS_ERROR_KSP_DOES_NOT_SUPPORT_PROTECTION","9109":"DNS_ERROR_UNEXPECTED_DATA_PROTECTION_ERROR","9110":"DNS_ERROR_UNEXPECTED_CNG_ERROR","9111":"DNS_ERROR_UNKNOWN_SIGNING_PARAMETER_VERSION","9112":"DNS_ERROR_KSP_NOT_ACCESSIBLE","9113":"DNS_ERROR_TOO_MANY_SKDS","9114":"DNS_ERROR_INVALID_ROLLOVER_PERIOD","9115":"DNS_ERROR_INVALID_INITIAL_ROLLOVER_OFFSET","9116":"DNS_ERROR_ROLLOVER_IN_PROGRESS","9117":"DNS_ERROR_STANDBY_KEY_NOT_PRESENT","9118":"DNS_ERROR_NOT_ALLOWED_ON_ZSK","9119":"DNS_ERROR_NOT_ALLOWED_ON_ACTIVE_SKD","9120":"DNS_ERROR_ROLLOVER_ALREADY_QUEUED","9121":"DNS_ERROR_NOT_ALLOWED_ON_UNSIGNED_ZONE","9122":"DNS_ERROR_BAD_KEYMASTER","9123":"DNS_ERROR_INVALID_SIGNATURE_VALIDITY_PERIOD","9124":"DNS_ERROR_INVALID_NSEC3_ITERATION_COUNT","9125":"DNS_ERROR_DNSSEC_IS_DISABLED","9126":"DNS_ERROR_INVALID_XML","9127":"DNS_ERROR_NO_VALID_TRUST_ANCHORS","9128":"DNS_ERROR_ROLLOVER_NOT_POKEABLE","9129":"DNS_ERROR_NSEC3_NAME_COLLISION","9130":"DNS_ERROR_NSEC_INCOMPATIBLE_WITH_NSEC3_RSA_SHA1","9501":"DNS_INFO_NO_RECORDS","9502":"DNS_ERROR_BAD_PACKET","9503":"DNS_ERROR_NO_PACKET","9504":"DNS_ERROR_RCODE","9505":"DNS_ERROR_UNSECURE_PACKET","9506":"DNS_REQUEST_PENDING","9551":"DNS_ERROR_INVALID_TYPE","9552":"DNS_ERROR_INVALID_IP_ADDRESS","9553":"DNS_ERROR_INVALID_PROPERTY","9554":"DNS_ERROR_TRY_AGAIN_LATER","9555":"DNS_ERROR_NOT_UNIQUE","9556":"DNS_ERROR_NON_RFC_NAME","9557":"DNS_STATUS_FQDN","9558":"DNS_STATUS_DOTTED_NAME","9559":"DNS_STATUS_SINGLE_PART_NAME","9560":"DNS_ERROR_INVALID_NAME_CHAR","9561":"DNS_ERROR_NUMERIC_NAME","9562":"DNS_ERROR_NOT_ALLOWED_ON_ROOT_SERVER","9563":"DNS_ERROR_NOT_ALLOWED_UNDER_DELEGATION","9564":"DNS_ERROR_CANNOT_FIND_ROOT_HINTS","9565":"DNS_ERROR_INCONSISTENT_ROOT_HINTS","9566":"DNS_ERROR_DWORD_VALUE_TOO_SMALL","9567":"DNS_ERROR_DWORD_VALUE_TOO_LARGE","9568":"DNS_ERROR_BACKGROUND_LOADING","9569":"DNS_ERROR_NOT_ALLOWED_ON_RODC","9570":"DNS_ERROR_NOT_ALLOWED_UNDER_DNAME","9571":"DNS_ERROR_DELEGATION_REQUIRED","9572":"DNS_ERROR_INVALID_POLICY_TABLE","9573":"DNS_ERROR_ADDRESS_REQUIRED","9601":"DNS_ERROR_ZONE_DOES_NOT_EXIST","9602":"DNS_ERROR_NO_ZONE_INFO","9603":"DNS_ERROR_INVALID_ZONE_OPERATION","9604":"DNS_ERROR_ZONE_CONFIGURATION_ERROR","9605":"DNS_ERROR_ZONE_HAS_NO_SOA_RECORD","9606":"DNS_ERROR_ZONE_HAS_NO_NS_RECORDS","9607":"DNS_ERROR_ZONE_LOCKED","9608":"DNS_ERROR_ZONE_CREATION_FAILED","9609":"DNS_ERROR_ZONE_ALREADY_EXISTS","9610":"DNS_ERROR_AUTOZONE_ALREADY_EXISTS","9611":"DNS_ERROR_INVALID_ZONE_TYPE","9612":"DNS_ERROR_SECONDARY_REQUIRES_MASTER_IP","9613":"DNS_ERROR_ZONE_NOT_SECONDARY","9614":"DNS_ERROR_NEED_SECONDARY_ADDRESSES","9615":"DNS_ERROR_WINS_INIT_FAILED","9616":"DNS_ERROR_NEED_WINS_SERVERS","9617":"DNS_ERROR_NBSTAT_INIT_FAILED","9618":"DNS_ERROR_SOA_DELETE_INVALID","9619":"DNS_ERROR_FORWARDER_ALREADY_EXISTS","9620":"DNS_ERROR_ZONE_REQUIRES_MASTER_IP","9621":"DNS_ERROR_ZONE_IS_SHUTDOWN","9622":"DNS_ERROR_ZONE_LOCKED_FOR_SIGNING","9651":"DNS_ERROR_PRIMARY_REQUIRES_DATAFILE","9652":"DNS_ERROR_INVALID_DATAFILE_NAME","9653":"DNS_ERROR_DATAFILE_OPEN_FAILURE","9654":"DNS_ERROR_FILE_WRITEBACK_FAILED","9655":"DNS_ERROR_DATAFILE_PARSING","9701":"DNS_ERROR_RECORD_DOES_NOT_EXIST","9702":"DNS_ERROR_RECORD_FORMAT","9703":"DNS_ERROR_NODE_CREATION_FAILED","9704":"DNS_ERROR_UNKNOWN_RECORD_TYPE","9705":"DNS_ERROR_RECORD_TIMED_OUT","9706":"DNS_ERROR_NAME_NOT_IN_ZONE","9707":"DNS_ERROR_CNAME_LOOP","9708":"DNS_ERROR_NODE_IS_CNAME","9709":"DNS_ERROR_CNAME_COLLISION","9710":"DNS_ERROR_RECORD_ONLY_AT_ZONE_ROOT","9711":"DNS_ERROR_RECORD_ALREADY_EXISTS","9712":"DNS_ERROR_SECONDARY_DATA","9713":"DNS_ERROR_NO_CREATE_CACHE_DATA","9714":"DNS_ERROR_NAME_DOES_NOT_EXIST","9715":"DNS_WARNING_PTR_CREATE_FAILED","9716":"DNS_WARNING_DOMAIN_UNDELETED","9717":"DNS_ERROR_DS_UNAVAILABLE","9718":"DNS_ERROR_DS_ZONE_ALREADY_EXISTS","9719":"DNS_ERROR_NO_BOOTFILE_IF_DS_ZONE","9720":"DNS_ERROR_NODE_IS_DNAME","9721":"DNS_ERROR_DNAME_COLLISION","9722":"DNS_ERROR_ALIAS_LOOP","9751":"DNS_INFO_AXFR_COMPLETE","9752":"DNS_ERROR_AXFR","9753":"DNS_INFO_ADDED_LOCAL_WINS","9801":"DNS_STATUS_CONTINUE_NEEDED","9851":"DNS_ERROR_NO_TCPIP","9852":"DNS_ERROR_NO_DNS_SERVERS","9901":"DNS_ERROR_DP_DOES_NOT_EXIST","9902":"DNS_ERROR_DP_ALREADY_EXISTS","9903":"DNS_ERROR_DP_NOT_ENLISTED","9904":"DNS_ERROR_DP_ALREADY_ENLISTED","9905":"DNS_ERROR_DP_NOT_AVAILABLE","9906":"DNS_ERROR_DP_FSMO_ERROR","9911":"DNS_ERROR_RRL_NOT_ENABLED","9912":"DNS_ERROR_RRL_INVALID_WINDOW_SIZE","9913":"DNS_ERROR_RRL_INVALID_IPV4_PREFIX","9914":"DNS_ERROR_RRL_INVALID_IPV6_PREFIX","9915":"DNS_ERROR_RRL_INVALID_TC_RATE","9916":"DNS_ERROR_RRL_INVALID_LEAK_RATE","9917":"DNS_ERROR_RRL_LEAK_RATE_LESSTHAN_TC_RATE","9921":"DNS_ERROR_VIRTUALIZATION_INSTANCE_ALREADY_EXISTS","9922":"DNS_ERROR_VIRTUALIZATION_INSTANCE_DOES_NOT_EXIST","9923":"DNS_ERROR_VIRTUALIZATION_TREE_LOCKED","9924":"DNS_ERROR_INVAILD_VIRTUALIZATION_INSTANCE_NAME","9925":"DNS_ERROR_DEFAULT_VIRTUALIZATION_INSTANCE","9951":"DNS_ERROR_ZONESCOPE_ALREADY_EXISTS","9952":"DNS_ERROR_ZONESCOPE_DOES_NOT_EXIST","9953":"DNS_ERROR_DEFAULT_ZONESCOPE","9954":"DNS_ERROR_INVALID_ZONESCOPE_NAME","9955":"DNS_ERROR_NOT_ALLOWED_WITH_ZONESCOPES","9956":"DNS_ERROR_LOAD_ZONESCOPE_FAILED","9957":"DNS_ERROR_ZONESCOPE_FILE_WRITEBACK_FAILED","9958":"DNS_ERROR_INVALID_SCOPE_NAME","9959":"DNS_ERROR_SCOPE_DOES_NOT_EXIST","9960":"DNS_ERROR_DEFAULT_SCOPE","9961":"DNS_ERROR_INVALID_SCOPE_OPERATION","9962":"DNS_ERROR_SCOPE_LOCKED","9963":"DNS_ERROR_SCOPE_ALREADY_EXISTS","9971":"DNS_ERROR_POLICY_ALREADY_EXISTS","9972":"DNS_ERROR_POLICY_DOES_NOT_EXIST","9973":"DNS_ERROR_POLICY_INVALID_CRITERIA","9974":"DNS_ERROR_POLICY_INVALID_SETTINGS","9975":"DNS_ERROR_CLIENT_SUBNET_IS_ACCESSED","9976":"DNS_ERROR_CLIENT_SUBNET_DOES_NOT_EXIST","9977":"DNS_ERROR_CLIENT_SUBNET_ALREADY_EXISTS","9978":"DNS_ERROR_SUBNET_DOES_NOT_EXIST","9979":"DNS_ERROR_SUBNET_ALREADY_EXISTS","9980":"DNS_ERROR_POLICY_LOCKED","9981":"DNS_ERROR_POLICY_INVALID_WEIGHT","9982":"DNS_ERROR_POLICY_INVALID_NAME","9983":"DNS_ERROR_POLICY_MISSING_CRITERIA","9984":"DNS_ERROR_INVALID_CLIENT_SUBNET_NAME","9985":"DNS_ERROR_POLICY_PROCESSING_ORDER_INVALID","9986":"DNS_ERROR_POLICY_SCOPE_MISSING","9987":"DNS_ERROR_POLICY_SCOPE_NOT_ALLOWED","9988":"DNS_ERROR_SERVERSCOPE_IS_REFERENCED","9989":"DNS_ERROR_ZONESCOPE_IS_REFERENCED","9990":"DNS_ERROR_POLICY_INVALID_CRITERIA_CLIENT_SUBNET","9991":"DNS_ERROR_POLICY_INVALID_CRITERIA_TRANSPORT_PROTOCOL","9992":"DNS_ERROR_POLICY_INVALID_CRITERIA_NETWORK_PROTOCOL","9993":"DNS_ERROR_POLICY_INVALID_CRITERIA_INTERFACE","9994":"DNS_ERROR_POLICY_INVALID_CRITERIA_FQDN","9995":"DNS_ERROR_POLICY_INVALID_CRITERIA_QUERY_TYPE","9996":"DNS_ERROR_POLICY_INVALID_CRITERIA_TIME_OF_DAY"},"source":"def status = params[ctx.sysmon.dns.status];\nif (status != null) {\n  ctx.sysmon.dns.status = status;\n}"}},{"convert":{"field":"winlog.event_data.Archived","ignore_failure":true,"ignore_missing":true,"target_field":"sysmon.file.archived","type":"boolean"}},{"convert":{"field":"winlog.event_data.IsExecutable","ignore_failure":true,"ignore_missing":true,"target_field":"sysmon.file.is_executable","type":"boolean"}},{"append":{"allow_duplicates":false,"field":"related.user","if":"ctx?.user?.name != null && ctx.user.name != \"\"","ignore_failure":true,"value":"{{user.name}}"}},{"append":{"allow_duplicates":false,"field":"related.ip","if":"ctx?.source?.ip != null && ctx.source.ip != \"\"","ignore_failure":true,"value":"{{source.ip}}"}},{"append":{"allow_duplicates":false,"field":"related.ip","if":"ctx?.destination?.ip != null && ctx.destination.ip != \"\"","ignore_failure":true,"value":"{{destination.ip}}"}},{"script":{"description":"Set registry fields.","if":"ctx?.winlog?.event_data?.TargetObject != null && [\"12\", \"13\", \"14\"].contains(ctx.event.code)","lang":"painless","params":{"HKCC":"HKCC","HKCR":"HKCR","HKCU":"HKCU","HKDD":"HKDD","HKEY_CLASSES_ROOT":"HKCR","HKEY_CURRENT_CONFIG":"HKCC","HKEY_CURRENT_USER":"HKCU","HKEY_DYN_DATA":"HKDD","HKEY_LOCAL_MACHINE":"HKLM","HKEY_PERFORMANCE_DATA":"HKPD","HKEY_USERS":"HKU","HKLM":"HKLM","HKPD":"HKPD","HKU":"HKU"},"source":"ctx.registry = new HashMap();\nPattern qwordRegex = /(?i)QWORD \\(((0x[0-9A-F]{8})-(0x[0-9A-F]{8}))\\)/;\nPattern dwordRegex = /(?i)DWORD \\((0x[0-9A-F]{8})\\)/;\nPattern binDataRegex = /Binary Data/;\n\ndef path = ctx.winlog.event_data.TargetObject;\nctx.registry.path = path;\n\ndef pathTokens = Arrays.asList(/\\\\/.split(path));\ndef hive = params[pathTokens[0]];\nif (hive != null) {\n  ctx.registry.hive = hive;\n  if (pathTokens.length > 1) {\n    ctx.registry.key = pathTokens.subList(1, pathTokens.length).join(\"\\\\\");\n  }\n}\n\ndef value = pathTokens[pathTokens.length - 1];\nctx.registry.value = value;\n\ndef data = ctx?.winlog?.event_data?.Details;\nif (data != null && data != \"\") {\n  def prefixLen = 2; // to remove 0x prefix\n  def dataValue = \"\";\n  def dataType = \"\";\n  def matcher = qwordRegex.matcher(data);\n  if (matcher.matches()) {\n    def parsedHighByte = Long.parseLong(matcher.group(2).substring(prefixLen), 16);\n    def parsedLowByte = Long.parseLong(matcher.group(3).substring(prefixLen), 16);\n    if (!Double.isNaN(parsedHighByte) && !Double.isNaN(parsedLowByte)) {\n      dataType = \"SZ_QWORD\";\n      dataValue = Long.toString(((parsedHighByte << 8) + parsedLowByte));\n      ctx.registry.data = [\n        \"strings\": [dataValue],\n        \"type\": dataType\n      ];\n    }\n    return;\n  }\n\n  matcher = dwordRegex.matcher(data);\n  if (matcher.matches()) {\n    def parsedValue = Long.parseLong(matcher.group(1).substring(prefixLen), 16);\n    if (!Double.isNaN(parsedValue)) {\n      dataType = \"SZ_DWORD\";\n      dataValue = Long.toString(parsedValue);\n      ctx.registry.data = [\n        \"strings\": [dataValue],\n        \"type\": dataType\n      ];\n    }\n    return;\n  }\n\n  matcher = binDataRegex.matcher(data);\n  if (matcher.matches()) {\n    // Data type could be REG_BINARY or REG_MULTI_SZ\n    ctx.registry.data = [\n      \"strings\": [data],\n      \"type\": \"REG_BINARY\"\n    ];\n    return;\n  }\n\n  // REG_SZ or REG_EXPAND_SZ\n  ctx.registry.data = [\n    \"strings\": [data],\n    \"type\": \"REG_SZ\"\n  ];\n}"}},{"remove":{"field":["_temp","winlog.event_data.ProcessId","winlog.event_data.ParentProcessId","winlog.event_data.SourceProcessId","winlog.event_data.SourceThreadId","winlog.event_data.SourceIp","winlog.event_data.SourcePort","winlog.event_data.SourcePortName","winlog.event_data.DestinationIp","winlog.event_data.DestinationPort","winlog.event_data.DestinationPortName","winlog.event_data.RuleName","winlog.event_data.User","winlog.event_data.Initiated","winlog.event_data.SourceIsIpv6","winlog.event_data.DestinationIsIpv6","winlog.event_data.QueryStatus","winlog.event_data.Archived","winlog.event_data.IsExecutable","winlog.event_data.QueryResults","winlog.event_data.UtcTime","winlog.event_data.Hash","winlog.event_data.Hashes","winlog.event_data.TargetObject","winlog.event_data.Details","winlog.time_created","winlog.level"],"ignore_failure":true,"ignore_missing":true}},{"remove":{"description":"Remove empty event data.","field":"winlog.event_data","if":"ctx?.winlog?.event_data != null && ctx.winlog.event_data.size() == 0","ignore_failure":true,"ignore_missing":true}}]}
